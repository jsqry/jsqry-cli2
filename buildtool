#!/usr/bin/awk -f

BEGIN {
    current_goal_idx = -1
    goals[-1] = "" # prelude
}

"@define" != $1 &&
"@goal" != $1 &&
"@depends_on" != $1 &&
"@reached_if" != $1 {
    append_code_line($0)
    next
}

"@define" == $1 {
    check_prelude_only()

    $1 = "export"
    append_code_line($0)
    next
}

"@goal" == $1 {
    goal_name = trim($2)
    if (length(goal_name) == 0) {
        die("Goal must have a name")
    }
    if (goal_name in goals_by_name) {
        die("Goal " goal_name " is already defined")
    }
    current_goal_idx++
    goals[current_goal_idx] = goal_name
    goals_by_name[goal_name] = 1
    next
}

"@depends_on" == $1 {
    check_goal_only()

    n = current_goal_name()
    for (i=2; i<=NF; i++) {
        dependencies[n][i-2] = $i
    }

    next
}

"@reached_if" == $1 {
    check_goal_only()


    $1 = ""
    append_code_line("  if " $0 "; then")
    append_code_line("  echo \"goal '" current_goal_name() "' is already satisfied\"")
    append_code_line("  fi")


    next
}

END {
    for (i = -1; i <= current_goal_idx; i++) {
        n = goals[i]

        if (length(n) != 0) {
            print n "() {\n"
        }

        print code[n] "\n"

        if (length(n) != 0) {
            print "}\n"
        }
    }
}

function is_prelude() {
    return current_goal_idx < 0
}

function check_prelude_only() {
    if (!is_prelude()) {
        die("Only use " $1 " in prelude")
    }
}

function check_goal_only() {
   if (is_prelude()) {
       die("Only use " $1 " in goal")
   }
}

function current_goal_name() {
    return current_goal_idx == -1 ? "" : goals[current_goal_idx]
}

function die(msg) {
    print msg ":\n" ARGV[1] ":" NR ": " $0
    exit 1
}

function append_code_line(line,  n, current_code) {
    n = current_goal_name()
    #print "Append line for '" n "': " line
    current_code = code[n]
    code[n] = current_code ? current_code "\n" line : line
}

function ltrim(s) { sub(/^[ \t\r\n]+/, "", s); return s }
function rtrim(s) { sub(/[ \t\r\n]+$/, "", s); return s }
function trim(s) { return rtrim(ltrim(s)); }