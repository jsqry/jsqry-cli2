$ jsqry -v
| 0.1.2

$ jsqry -h
| jsqry ver. 0.1.2
| Usage: echo $JSON | jsqry 'query'
|  -1,--first     return first result element
|  -h,--help      print help and exit
|  -v,--version   print version and exit
|  -c,--compact   compact output (no pretty-print)
|  -u,--unquote   unquote output string(s)
|  -as ARG,
|  --arg-str ARG  supply string query argument
|  -a ARG,
|  --arg ARG      supply query argument of any other type

$ echo '[{"a":1},{"a":2}]' | jsqry 'a'
| [
|   1,
|   2
| ]

$ echo '[{"a":1},{"a":2}]' | jsqry # pretty-print
| [
|   {
|     "a": 1
|   },
|   {
|     "a": 2
|   }
| ]

$ echo '[{"a":1},{"a":2}]' | jsqry -1 'a' # first
| 1

$ echo '["a", "b", "c", "d", "e"]' | jsqry '[i%2==0]'
| [
|   "a",
|   "c",
|   "e"
| ]

$ echo '[{ "k": [{ "a": 1 }, { "a": 2 }] }, { "k": [{ "a": 3 }] }]' | jsqry 'k.*.a'
| [
|   1,
|   2,
|   3
| ]

$ echo '[{ "k": [{ "a": 1 }, { "a": 2 }] }, { "k": [{ "a": 3 }] }]' | jsqry 'k.*.a[::-1]'
| [
|   3,
|   2,
|   1
| ]

$ echo '[{ "k": [{ "a": 1 }, { "a": 2 }] }, { "k": [{ "a": 3 }] }]' | jsqry -1 'k.*.a[::-1][_<3][1]{_+100}'
| 101

$ echo 'hello' | jsqry 'a'
@ error: Wrong JSON
? 1

$ echo '{}' | jsqry '['
@ error: Not closed [
? 1

$ echo '{}' | jsqry '}'
@ error: } without {
? 1

=== Tests for the documentation examples ===

$ printf '[{"name":"John","age":30},\n\t{"name":"Alice","age":25},\n\t{"name":"Bob","age":50}]' | jsqry 'name'
| [
|   "John",
|   "Alice",
|   "Bob"
| ]

$ printf '[{"name":"John","age":30},\n\t{"name":"Alice","age":25},\n\t{"name":"Bob","age":50}]' | jsqry 'name' -c
| ["John","Alice","Bob"]

$ printf '[{"name":"John","age":30},\n\t{"name":"Alice","age":25},\n\t{"name":"Bob","age":50}]' | jsqry -1 'name'
| "John"

$ echo '[{"name":"John","age":30},{"name":"Alice","age":25},{"name":"Bob","age":50}]' | jsqry '[ _.age>=? && _.name.toLowerCase().startsWith(?) ]' --arg 30 --arg-str joh
| [
|   {
|     "name": "John",
|     "age": 30
|   }
| ]

$ echo '[{"name":"John","age":30},{"name":"Alice","age":25},{"name":"Bob","age":50}]' | jsqry
| [
|   {
|     "name": "John",
|     "age": 30
|   },
|   {
|     "name": "Alice",
|     "age": 25
|   },
|   {
|     "name": "Bob",
|     "age": 50
|   }
| ]

$ echo '[1,2,3,4,5]' | jsqry '[_>2] {_+100} s(-_) [-2:]'
| [
|   104,
|   103
| ]

$ printf '["HTTP://EXAMPLE.COM/123",\n\t"https://www.Google.com/search?q=test",\n\t"https://www.YouTube.com/watch?v=_OBlgSz8sSM"]' | jsqry '{ _.match(/:\/\/([^\/]+)\//)[1].toLowerCase() }'
| [
|   "example.com",
|   "www.google.com",
|   "www.youtube.com"
| ]

=== Test arguments ===

$ echo '[{"name": "Bob", "age": 30}, {"name": "Alice", "age": 25}]' | jsqry '[_.name==?].age' --arg-str Alice
| [
|   25
| ]

$ echo 1 | jsqry '{[?,?,?,?,?,?]}' -as str -a false --arg null -a 2e5 -a [1,2,3] -a '{"K":"V"}'
| [
|   "str",
|   false,
|   null,
|   200000,
|   [
|     1,
|     2,
|     3
|   ],
|   {
|     "K": "V"
|   }
| ]

$ echo [2,1,3] | jsqry '{ ?[_] }' --arg '{"1":"one", "2":"two", "3": "three"}'
| [
|   "two",
|   "one",
|   "three"
| ]

$ echo 1 | jsqry '{[?,?,?]}' -as -a -as "qqq" --arg-str z
| [
|   "-a",
|   "qqq",
|   "z"
| ]

=== unquoted output ===

$ echo '[{"name":"Bob"}, {"name": "Alice"}]' | jsqry 'name' --unquote
| Bob
| Alice

$ echo '[{"name":"Bob"}, {"name": "Alice"}]' | jsqry 'name' -1 -u
| Bob

$ echo '[{"name":"Bob"}, {"name": "Alice"}, {"name": {"value":"John"}}]' | jsqry 'name' -u
| Bob
| Alice
| {"value":"John"}

$ echo '[]' | jsqry -u # no output

$ echo '[]' | jsqry -u | wc -l
| 0

$ echo '[""]' | jsqry -u
| 
|

$ echo '[""]' | jsqry -u | wc -l
| 1

$ echo '[null,"null","\"test quotes"]' | jsqry -u
| null
| null
| "test quotes

$ echo '{"json":"{ \"a\": \"b\" }"}' | jsqry 'json' -u | jsqry
| {
|   "a": "b"
| }

=== Embedded queries ===

$ echo '[{ "name": "Alice", "props": [{ "key": "age", "val": 30 }, { "key": "car", "val": "Volvo" }] },{ "name": "Bob", "props": [{ "key": "age", "val": 40 }] },{ "name": "John", "props": [] }]' | jsqry '{ _.name + " : " + (f(_.props,"[_.key===`age`].val")||"") }'
| [
|   "Alice : 30",
|   "Bob : 40",
|   "John : "
| ]

$ echo '[{ "name": "Alice", "props": [{ "key": "age", "val": 30 }, { "key": "car", "val": "Volvo" }] },{ "name": "Bob", "props": [{ "key": "age", "val": 40 }] },{ "name": "John", "props": [] }]' | jsqry '{ _.name + " : " + (f(_.props,"[_.key===?].val", "age")||"") }'
| [
|   "Alice : 30",
|   "Bob : 40",
|   "John : "
| ]

$ echo '[{ "name": "Alice", "props": [{ "key": "age", "val": 30 }, { "key": "car", "val": "Volvo" }] },{ "name": "Bob", "props": [{ "key": "age", "val": 40 }] },{ "name": "John", "props": [] }]' | jsqry '{ _.name + " : " + (f(_.props,"[_.key===?].val", ?)||"") }' -as "age"
| [
|   "Alice : 30",
|   "Bob : 40",
|   "John : "
| ]

=== Invalid switches ===

$ echo 1 | jsqry -abc --unquote -1 --QWE
@ Invalid switches: -abc,--QWE
? 1

$ jsqry -abc --QWE
@ Invalid switches: -abc,--QWE
? 1

=== Segfault #1 ===

$ echo '[{"a":1},{"a":"hello"}]' | jsqry '[_.a>1]'
| []

$ echo '[{"a":1},{"a":"hello"}, {"a":2}]' | jsqry '[_.a>1]'
| [
|   {
|     "a": 2
|   }
| ]

=== https://github.com/jsqry/jsqry-cli2/issues/24 ===

$ echo '{"a":123}' | jsqry
| {
|   "a": 1234
| }

